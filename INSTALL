Quickstart SystemC AMS Installation Linux
==============================

To install SystemC AMS on a Linux system, do the following steps:

  1. Change to the top level directory

  2. Create a temporary directory, e.g.,

        > mkdir objdir

  3. Change to the temporary directory, e.g.,

        > cd objdir

  4. Set the following environment variable(s):

     For gcc compilers on Linux:

        > setenv CXX g++

     You can also specify an absolute path to the compiler of your choice.

  5. Configure the package for your system, e.g.,
     (The configure script is explained below.)

        > ../configure

     While the 'configure' script is running, which takes a few moments, 
     it prints messages to inform you of the features it is checking.
     It also detects the platform.

     SystemC AMS requires on the availability of a SystemC installation 
     directory, the configure script will automatically check this by using the 
     environment variable SYSTEMC_HOME . 
     
     In case the configure script cannot find SystemC, it will stop. You can specify 
     the path to the SystemC installation directory as follows:

        > ../configure --with-systemc=/path/to/your/systemc-2.3.3  
    The configure scipt also checks automatically that SystemC applications can be 
    built with the specified compiler. To disable this check add the option
    --disable-systemc_compile_check .
   
  6. Compile the package.

        > make


  7. Install the package.

        > make install

For detailed description of the configure script and Microsoft Visual information 
please read the instructions below.

Installation Instructions
*************************

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004 Free
Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.

Contents:

        1. Installation Notes for Linux 

        2. Installation Notes for Windows


1. Installation Notes for Linux
-------------------------------

Basic Installation
==================

These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  (Caching is
disabled by default to prevent problems with accidental use of stale
cache files.)

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You only need
`configure.ac' if you want to change it or regenerate `configure' using
a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

Some systems require unusual options for compilation or linking that the
`configure' script does not know about.  Run `./configure --help' for
details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not support the `VPATH'
variable, you have to compile the package for one architecture at a
time in the source code directory.  After you have installed the
package for one architecture, use `make distclean' before reconfiguring
for another architecture.

Installation Names
==================

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PREFIX'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PREFIX', the package will
use PREFIX as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

There may be some features `configure' cannot figure out automatically,
but needs to determine by the type of machine the package will run on.
Usually, assuming the package is built to be run on the _same_
architectures, `configure' can figure that out, but if it prints a
message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the `--target=TYPE' option to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

If you want to set default values for `configure' scripts to share, you
can create a site shell script called `config.site' that gives default
values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

will cause the specified gcc to be used as the C compiler (unless it is
overridden in the site shell script).

`configure' Invocation
======================

`configure' recognizes the following options to control how it operates.

`--help'
`-h'
     Print a summary of the options to `configure', and exit.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.



2. Installation Notes for Windows
---------------------------------

Visual C++ 12.0 / newer Visual C++
====================
The systemc_ams directory contains a subdirectory: 'msvc12'.

The 'msvc12' directory contains the project and workspace files to
compile the 'systemc_ams.lib' library. Double-click on the 'systemc_ams.vcproj'
file to launch Visual C++ 10.0 (its also possible to launch with Visual C++ 9.0)
with the workspace file. The workspace file will have the proper switches set
to compile for Visual C++ 10.0. Select 'Build systemc_ams' under the Build menu
or press F7 to build 'systemc_ams.lib'. Also make sure that the compiler and
linker can find the SystemC header and library files respectively. Therefore the 
following environment variables are used:
 - SYSTEMC_HOME - specifies the SystemC directory location
 - SYSTEMC_MSVC - specifies the visual studio version directory 
                  (for SystemC 2.3.3 set this variable to 'msvc10' )
 
Otherwise you can correct the additional include
directory and the additional library directory to your 'systemc-2.3.x' location in
'systemc_ams.vcxproj'.

Creating SystemC AMS Applications
=================================

1. Start Visual Studio. From the Start Page select New Project and Win32 
   Console Project. Type the project name and select a suitable location 
   then click OK.

2. Select the Application Settings page of the Win32 Application Wizard 
   and make sure the 'Empty project' box is ticked. Click 'Finish' to 
   complete the wizard.
   
3. Add new/existing C++ files to the project and edit code.

4. Display the project Property Pages by selecting 'Properties...' from 
   the Project menu. 
   
5. From the C/C++ tab, select the General properties and set 
   'Detect 64-bit Portability Issues' to No

6. From the C/C++ tab, select the Language properties and set 
   'Enable Run-Time Type Info' to Yes

7. From the C/C++ tab, select the Command Line properties and add /vmg
   to the 'Additional Options:' box.

8. From the Linker tab, select the Input properties and type 'systemc.lib' 
   in the 'Additional Dependencies' box.

9. Click OK

Also make sure that the compiler and linker can find the SystemC/SystemC AMS
header and library files respectively. There are two ways to do this, both can
refer to an environment variable pointing to the SystemC install path:

To update the include file and library directory search paths for all
projects:

1. Select Tools -> Options . . . and the Projects -> VC++ Directories tab
   
2. Select show directories for: Library files

3.1 Select the 'New' icon and enter: $(SYSTEMC)\SystemC\Debug
3.2 Select the 'New' icon and enter: $(SYSTEMC_AMS)\Debug

4. Select show directories for: Include files

5.1 Select the 'New' icon and enter: $(SYSTEMC)\..\src
5.2 Select the 'New' icon and enter: $(SYSTEMC_AMS)\src

To add the include file and library directory search paths for the current
project only:

1. Display the project Property Pages by selecting 'Properties...' from 
   the Project menu. 
  
2. From the C/C++ tab, select the General properties and type the path to the 
   SystemC 'src' directory in the text entry field labeled
  'Additional include directories' (e.g. the examples use '$(SYSTEMC)\..\src',
  '$(SYSTEMC_AMS)\src').

3. From the Linker tab, select the General properties and type the path to 
   the SystemC library in the text entry field labeled 
   'Additional Library Directories 
   (e.g. the examples use '$(SYSTEMC)\SystemC\Debug', '$(SYSTEMC_AMS)\Debug').
   
4. From the Linker tab, select the Input properties and enter 'systemc.lib'
   and 'systemc_ams.lib' in the 'Additional Dependencies' text entry field.

5. Click OK

To set the SYSTEMC and SYSTEMC_AMS environment variables, right-click on the
'My Computer' icon and select the properties menu. Select the 'Advanced' tab
from the 'System Properties' page and click the 'Environment Variables' button.
Create a new environment variable named 'SYSTEMC' with a variable value that
contains the path to the SystemC install (e.g. 'C:\apps\systemc-2.2\msvc71').
Click OK to save the environment variable.
Create a new environment variable named 'SYSTEMC_AMS' with a variable value
that contains the path to the SystemC install (e.g. 'C:\apps\systemc_ams\msvc12').
Click OK to save the environment variable (note the environment variable must
be set before starting Visual C++).